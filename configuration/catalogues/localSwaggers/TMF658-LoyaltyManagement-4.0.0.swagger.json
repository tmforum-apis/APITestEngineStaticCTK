{
  "swagger": "2.0",
  "info": {
    "title": "Loyalty Management",
    "description": "The TMForum Loyalty API Specification as developed by Globetom",
    "version": "4.0.0"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/loyalty/v4/",
  "schemes": ["https"],
  "consumes": ["application/json;charset=utf-8"],
  "produces": ["application/json;charset=utf-8"],
  "tags": [
    {
      "name": "loyaltyProgramProductSpec"
    },
    {
      "name": "loyaltyProgramMember"
    },
    {
      "name": "loyaltyProgramProduct"
    },
    {
      "name": "loyaltyAccount"
    },
    {
      "name": "loyaltyBalance"
    },
    {
      "name": "loyaltyRule"
    },
    {
      "name": "loyaltyEventType"
    },
    {
      "name": "loyaltyCondition"
    },
    {
      "name": "loyaltyAction"
    },
    {
      "name": "loyaltyRuleCondition"
    },
    {
      "name": "loyaltyRuleAction"
    },
    {
      "name": "loyaltyRuleEventType"
    },
    {
      "name": "loyaltyEvent"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/loyaltyProgramProductSpec": {
      "get": {
        "operationId": "listLoyaltyProgramProductSpec",
        "summary": "List or find LoyaltyProgramProductSpec objects",
        "description": "This operation list or find LoyaltyProgramProductSpec entities",
        "tags": ["loyaltyProgramProductSpec"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyProgramProductSpec"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyProgramProductSpec",
        "summary": "Creates a LoyaltyProgramProductSpec",
        "description": "This operation creates a LoyaltyProgramProductSpec entity.",
        "tags": ["loyaltyProgramProductSpec"],
        "parameters": [
          {
            "name": "loyaltyProgramProductSpec",
            "description": "The LoyaltyProgramProductSpec to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProductSpec_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProductSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyProgramProductSpec/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyProgramProductSpec",
        "summary": "Retrieves a LoyaltyProgramProductSpec by ID",
        "description": "This operation retrieves a LoyaltyProgramProductSpec entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyProgramProductSpec"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramProductSpec",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProductSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyProgramProductSpec",
        "summary": "Updates partially a LoyaltyProgramProductSpec",
        "description": "This operation updates partially a LoyaltyProgramProductSpec entity.",
        "tags": ["loyaltyProgramProductSpec"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramProductSpec",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyProgramProductSpec",
            "description": "The LoyaltyProgramProductSpec to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProductSpec_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProductSpec"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyProgramProductSpec",
        "summary": "Deletes a LoyaltyProgramProductSpec",
        "description": "This operation deletes a LoyaltyProgramProductSpec entity.",
        "tags": ["loyaltyProgramProductSpec"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramProductSpec",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyProgramMember": {
      "get": {
        "operationId": "listLoyaltyProgramMember",
        "summary": "List or find LoyaltyProgramMember objects",
        "description": "This operation list or find LoyaltyProgramMember entities",
        "tags": ["loyaltyProgramMember"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyProgramMember"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyProgramMember",
        "summary": "Creates a LoyaltyProgramMember",
        "description": "This operation creates a LoyaltyProgramMember entity.",
        "tags": ["loyaltyProgramMember"],
        "parameters": [
          {
            "name": "loyaltyProgramMember",
            "description": "The LoyaltyProgramMember to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramMember_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramMember"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyProgramMember/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyProgramMember",
        "summary": "Retrieves a LoyaltyProgramMember by ID",
        "description": "This operation retrieves a LoyaltyProgramMember entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyProgramMember"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramMember",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramMember"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyProgramMember",
        "summary": "Updates partially a LoyaltyProgramMember",
        "description": "This operation updates partially a LoyaltyProgramMember entity.",
        "tags": ["loyaltyProgramMember"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramMember",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyProgramMember",
            "description": "The LoyaltyProgramMember to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramMember_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramMember"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyProgramMember",
        "summary": "Deletes a LoyaltyProgramMember",
        "description": "This operation deletes a LoyaltyProgramMember entity.",
        "tags": ["loyaltyProgramMember"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramMember",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyProgramProduct": {
      "get": {
        "operationId": "listLoyaltyProgramProduct",
        "summary": "List or find LoyaltyProgramProduct objects",
        "description": "This operation list or find LoyaltyProgramProduct entities",
        "tags": ["loyaltyProgramProduct"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyProgramProduct"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyProgramProduct",
        "summary": "Creates a LoyaltyProgramProduct",
        "description": "This operation creates a LoyaltyProgramProduct entity.",
        "tags": ["loyaltyProgramProduct"],
        "parameters": [
          {
            "name": "loyaltyProgramProduct",
            "description": "The LoyaltyProgramProduct to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProduct_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProduct"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyProgramProduct/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyProgramProduct",
        "summary": "Retrieves a LoyaltyProgramProduct by ID",
        "description": "This operation retrieves a LoyaltyProgramProduct entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyProgramProduct"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramProduct",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProduct"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyProgramProduct",
        "summary": "Updates partially a LoyaltyProgramProduct",
        "description": "This operation updates partially a LoyaltyProgramProduct entity.",
        "tags": ["loyaltyProgramProduct"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramProduct",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyProgramProduct",
            "description": "The LoyaltyProgramProduct to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProduct_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyProgramProduct"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyProgramProduct",
        "summary": "Deletes a LoyaltyProgramProduct",
        "description": "This operation deletes a LoyaltyProgramProduct entity.",
        "tags": ["loyaltyProgramProduct"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyProgramProduct",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyAccount": {
      "get": {
        "operationId": "listLoyaltyAccount",
        "summary": "List or find LoyaltyAccount objects",
        "description": "This operation list or find LoyaltyAccount entities",
        "tags": ["loyaltyAccount"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyAccount"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyAccount/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyAccount",
        "summary": "Retrieves a LoyaltyAccount by ID",
        "description": "This operation retrieves a LoyaltyAccount entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyAccount"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyAccount",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyAccount"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyBalance": {
      "get": {
        "operationId": "listLoyaltyBalance",
        "summary": "List or find LoyaltyBalance objects",
        "description": "This operation list or find LoyaltyBalance entities",
        "tags": ["loyaltyBalance"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyBalance"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyBalance",
        "summary": "Creates a LoyaltyBalance",
        "description": "This operation creates a LoyaltyBalance entity.",
        "tags": ["loyaltyBalance"],
        "parameters": [
          {
            "name": "loyaltyBalance",
            "description": "The LoyaltyBalance to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyBalance_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyBalance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyBalance/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyBalance",
        "summary": "Retrieves a LoyaltyBalance by ID",
        "description": "This operation retrieves a LoyaltyBalance entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyBalance"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyBalance",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyBalance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyBalance",
        "summary": "Updates partially a LoyaltyBalance",
        "description": "This operation updates partially a LoyaltyBalance entity.",
        "tags": ["loyaltyBalance"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyBalance",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyBalance",
            "description": "The LoyaltyBalance to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyBalance_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyBalance"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyBalance",
        "summary": "Deletes a LoyaltyBalance",
        "description": "This operation deletes a LoyaltyBalance entity.",
        "tags": ["loyaltyBalance"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyBalance",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRule": {
      "get": {
        "operationId": "listLoyaltyRule",
        "summary": "List or find LoyaltyRule objects",
        "description": "This operation list or find LoyaltyRule entities",
        "tags": ["loyaltyRule"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyRule"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyRule",
        "summary": "Creates a LoyaltyRule",
        "description": "This operation creates a LoyaltyRule entity.",
        "tags": ["loyaltyRule"],
        "parameters": [
          {
            "name": "loyaltyRule",
            "description": "The LoyaltyRule to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyRule_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRule/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyRule",
        "summary": "Retrieves a LoyaltyRule by ID",
        "description": "This operation retrieves a LoyaltyRule entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyRule"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRule",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyRule",
        "summary": "Updates partially a LoyaltyRule",
        "description": "This operation updates partially a LoyaltyRule entity.",
        "tags": ["loyaltyRule"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRule",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyRule",
            "description": "The LoyaltyRule to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyRule_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyRule",
        "summary": "Deletes a LoyaltyRule",
        "description": "This operation deletes a LoyaltyRule entity.",
        "tags": ["loyaltyRule"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRule",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyEventType": {
      "get": {
        "operationId": "listLoyaltyEventType",
        "summary": "List or find LoyaltyEventType objects",
        "description": "This operation list or find LoyaltyEventType entities",
        "tags": ["loyaltyEventType"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyEventType"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyEventType",
        "summary": "Creates a LoyaltyEventType",
        "description": "This operation creates a LoyaltyEventType entity.",
        "tags": ["loyaltyEventType"],
        "parameters": [
          {
            "name": "loyaltyEventType",
            "description": "The LoyaltyEventType to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyEventType/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyEventType",
        "summary": "Retrieves a LoyaltyEventType by ID",
        "description": "This operation retrieves a LoyaltyEventType entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyEventType"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEventType",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyEventType",
        "summary": "Updates partially a LoyaltyEventType",
        "description": "This operation updates partially a LoyaltyEventType entity.",
        "tags": ["loyaltyEventType"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEventType",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyEventType",
            "description": "The LoyaltyEventType to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateLoyaltyEventType",
        "summary": "Updates a LoyaltyEventType",
        "description": "This operation updates a LoyaltyEventType entity.",
        "tags": ["loyaltyEventType"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEventType",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyEventType",
            "description": "The LoyaltyEventType to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyEventType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyEventType",
        "summary": "Deletes a LoyaltyEventType",
        "description": "This operation deletes a LoyaltyEventType entity.",
        "tags": ["loyaltyEventType"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEventType",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyCondition": {
      "get": {
        "operationId": "listLoyaltyCondition",
        "summary": "List or find LoyaltyCondition objects",
        "description": "This operation list or find LoyaltyCondition entities",
        "tags": ["loyaltyCondition"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyCondition"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyCondition",
        "summary": "Creates a LoyaltyCondition",
        "description": "This operation creates a LoyaltyCondition entity.",
        "tags": ["loyaltyCondition"],
        "parameters": [
          {
            "name": "loyaltyCondition",
            "description": "The LoyaltyCondition to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyCondition/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyCondition",
        "summary": "Retrieves a LoyaltyCondition by ID",
        "description": "This operation retrieves a LoyaltyCondition entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyCondition"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyCondition",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyCondition",
        "summary": "Updates partially a LoyaltyCondition",
        "description": "This operation updates partially a LoyaltyCondition entity.",
        "tags": ["loyaltyCondition"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyCondition",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyCondition",
            "description": "The LoyaltyCondition to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateLoyaltyCondition",
        "summary": "Updates a LoyaltyCondition",
        "description": "This operation updates a LoyaltyCondition entity.",
        "tags": ["loyaltyCondition"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyCondition",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyCondition",
            "description": "The LoyaltyCondition to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyCondition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyCondition",
        "summary": "Deletes a LoyaltyCondition",
        "description": "This operation deletes a LoyaltyCondition entity.",
        "tags": ["loyaltyCondition"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyCondition",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyAction": {
      "get": {
        "operationId": "listLoyaltyAction",
        "summary": "List or find LoyaltyAction objects",
        "description": "This operation list or find LoyaltyAction entities",
        "tags": ["loyaltyAction"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyAction"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyAction",
        "summary": "Creates a LoyaltyAction",
        "description": "This operation creates a LoyaltyAction entity.",
        "tags": ["loyaltyAction"],
        "parameters": [
          {
            "name": "loyaltyAction",
            "description": "The LoyaltyAction to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyAction_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyAction/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyAction",
        "summary": "Retrieves a LoyaltyAction by ID",
        "description": "This operation retrieves a LoyaltyAction entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyAction"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyAction",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyAction",
        "summary": "Updates partially a LoyaltyAction",
        "description": "This operation updates partially a LoyaltyAction entity.",
        "tags": ["loyaltyAction"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyAction",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyAction",
            "description": "The LoyaltyAction to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyAction_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateLoyaltyAction",
        "summary": "Updates a LoyaltyAction",
        "description": "This operation updates a LoyaltyAction entity.",
        "tags": ["loyaltyAction"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyAction",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyAction",
            "description": "The LoyaltyAction to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyAction_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyAction",
        "summary": "Deletes a LoyaltyAction",
        "description": "This operation deletes a LoyaltyAction entity.",
        "tags": ["loyaltyAction"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyAction",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRuleCondition": {
      "get": {
        "operationId": "listLoyaltyRuleCondition",
        "summary": "List or find LoyaltyRuleCondition objects",
        "description": "This operation list or find LoyaltyRuleCondition entities",
        "tags": ["loyaltyRuleCondition"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyRuleCondition"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyRuleCondition",
        "summary": "Creates a LoyaltyRuleCondition",
        "description": "This operation creates a LoyaltyRuleCondition entity.",
        "tags": ["loyaltyRuleCondition"],
        "parameters": [
          {
            "name": "loyaltyRuleCondition",
            "description": "The LoyaltyRuleCondition to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleCondition_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleCondition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRuleCondition/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyRuleCondition",
        "summary": "Retrieves a LoyaltyRuleCondition by ID",
        "description": "This operation retrieves a LoyaltyRuleCondition entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyRuleCondition"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRuleCondition",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleCondition"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyRuleCondition",
        "summary": "Deletes a LoyaltyRuleCondition",
        "description": "This operation deletes a LoyaltyRuleCondition entity.",
        "tags": ["loyaltyRuleCondition"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRuleCondition",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRuleAction": {
      "get": {
        "operationId": "listLoyaltyRuleAction",
        "summary": "List or find LoyaltyRuleAction objects",
        "description": "This operation list or find LoyaltyRuleAction entities",
        "tags": ["loyaltyRuleAction"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyRuleAction"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyRuleAction",
        "summary": "Creates a LoyaltyRuleAction",
        "description": "This operation creates a LoyaltyRuleAction entity.",
        "tags": ["loyaltyRuleAction"],
        "parameters": [
          {
            "name": "loyaltyRuleAction",
            "description": "The LoyaltyRuleAction to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleAction_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRuleAction/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyRuleAction",
        "summary": "Retrieves a LoyaltyRuleAction by ID",
        "description": "This operation retrieves a LoyaltyRuleAction entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyRuleAction"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRuleAction",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleAction"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyRuleAction",
        "summary": "Deletes a LoyaltyRuleAction",
        "description": "This operation deletes a LoyaltyRuleAction entity.",
        "tags": ["loyaltyRuleAction"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRuleAction",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRuleEventType": {
      "get": {
        "operationId": "listLoyaltyRuleEventType",
        "summary": "List or find LoyaltyRuleEventType objects",
        "description": "This operation list or find LoyaltyRuleEventType entities",
        "tags": ["loyaltyRuleEventType"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyRuleEventType"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyRuleEventType",
        "summary": "Creates a LoyaltyRuleEventType",
        "description": "This operation creates a LoyaltyRuleEventType entity.",
        "tags": ["loyaltyRuleEventType"],
        "parameters": [
          {
            "name": "loyaltyRuleEventType",
            "description": "The LoyaltyRuleEventType to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleEventType_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleEventType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyRuleEventType/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyRuleEventType",
        "summary": "Retrieves a LoyaltyRuleEventType by ID",
        "description": "This operation retrieves a LoyaltyRuleEventType entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyRuleEventType"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRuleEventType",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyRuleEventType"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyRuleEventType",
        "summary": "Deletes a LoyaltyRuleEventType",
        "description": "This operation deletes a LoyaltyRuleEventType entity.",
        "tags": ["loyaltyRuleEventType"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyRuleEventType",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyEvent": {
      "get": {
        "operationId": "listLoyaltyEvent",
        "summary": "List or find LoyaltyEvent objects",
        "description": "This operation list or find LoyaltyEvent entities",
        "tags": ["loyaltyEvent"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LoyaltyEvent"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLoyaltyEvent",
        "summary": "Creates a LoyaltyEvent",
        "description": "This operation creates a LoyaltyEvent entity.",
        "tags": ["loyaltyEvent"],
        "parameters": [
          {
            "name": "loyaltyEvent",
            "description": "The LoyaltyEvent to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/loyaltyEvent/{id}": {
      "get": {
        "operationId": "retrieveLoyaltyEvent",
        "summary": "Retrieves a LoyaltyEvent by ID",
        "description": "This operation retrieves a LoyaltyEvent entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["loyaltyEvent"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEvent",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateLoyaltyEvent",
        "summary": "Updates a LoyaltyEvent",
        "description": "This operation updates a LoyaltyEvent entity.",
        "tags": ["loyaltyEvent"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEvent",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyEvent",
            "description": "The LoyaltyEvent to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLoyaltyEvent",
        "summary": "Updates partially a LoyaltyEvent",
        "description": "This operation updates partially a LoyaltyEvent entity.",
        "tags": ["loyaltyEvent"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEvent",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "loyaltyEvent",
            "description": "The LoyaltyEvent to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LoyaltyEvent"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLoyaltyEvent",
        "summary": "Deletes a LoyaltyEvent",
        "description": "This operation deletes a LoyaltyEvent entity.",
        "tags": ["loyaltyEvent"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LoyaltyEvent",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": ["events subscription"],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": ["events subscription"],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Any": {},
    "Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "required": ["name", "value"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        },
        "value": {
          "$ref": "#/definitions/Any",
          "description": "The value of the characteristic"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyAccount": {
      "type": "object",
      "description": "A loyalty account, containing loyalty balances.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the account."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty members loyalty account."
        },
        "loyaltyProgramProduct": {
          "$ref": "#/definitions/LoyaltyProgramProductRef"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyAccountRef": {
      "type": "object",
      "description": "Reference to a loyalty account.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the account."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty members loyalty account."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyAction": {
      "type": "object",
      "description": "Contains information on a loyalty action that should be applied should certain conditions be met for a loyalty rule and program.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty event type."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty event type."
        },
        "action": {
          "type": "string",
          "description": "The HTTP operation to be used when calling the endpoint"
        },
        "actionType": {
          "type": "string",
          "description": "The type of loyalty action."
        },
        "commonName": {
          "type": "string",
          "description": "A user-friendly identifier of the loyalty execution point."
        },
        "description": {
          "type": "string",
          "description": "A free-form description of the loyalty execution point."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint to call to trigger a BusinessInteraction, CustomerOrder or LoyaltyEarn."
        },
        "version": {
          "type": "string",
          "description": "A string that identifies the version of the loyalty action."
        },
        "actionAttributes": {
          "$ref": "#/definitions/Any",
          "description": "Additional attributes required to perform the action. These attributes will depend on the type of the loyalty action. For example, if it is a LoyaltyEarn action, there will be a \u201cquantity\u201d attribute value pair indicating how many points should be earned."
        },
        "body": {
          "$ref": "#/definitions/Any",
          "description": "The body if the request that is made when this action i executed. The body is assumed to be of type text/json. Any tokens denoted with {} will be replaced by attributes present in: Member profile, actionAttributes or event attributes in the loyalty event request."
        },
        "headers": {
          "$ref": "#/definitions/Any",
          "description": "The HTTP headers that is added to the action call."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyAction_Create": {
      "type": "object",
      "description": "Contains information on a loyalty action that should be applied should certain conditions be met for a loyalty rule and program.\nSkipped properties: id,href",
      "required": ["action", "endpoint"],
      "properties": {
        "action": {
          "type": "string",
          "description": "The HTTP operation to be used when calling the endpoint"
        },
        "actionType": {
          "type": "string",
          "description": "The type of loyalty action."
        },
        "commonName": {
          "type": "string",
          "description": "A user-friendly identifier of the loyalty execution point."
        },
        "description": {
          "type": "string",
          "description": "A free-form description of the loyalty execution point."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint to call to trigger a BusinessInteraction, CustomerOrder or LoyaltyEarn."
        },
        "version": {
          "type": "string",
          "description": "A string that identifies the version of the loyalty action."
        },
        "actionAttributes": {
          "$ref": "#/definitions/Any",
          "description": "Additional attributes required to perform the action. These attributes will depend on the type of the loyalty action. For example, if it is a LoyaltyEarn action, there will be a \u201cquantity\u201d attribute value pair indicating how many points should be earned."
        },
        "body": {
          "$ref": "#/definitions/Any",
          "description": "The body if the request that is made when this action i executed. The body is assumed to be of type text/json. Any tokens denoted with {} will be replaced by attributes present in: Member profile, actionAttributes or event attributes in the loyalty event request."
        },
        "headers": {
          "$ref": "#/definitions/Any",
          "description": "The HTTP headers that is added to the action call."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyAction_Update": {
      "type": "object",
      "description": "Contains information on a loyalty action that should be applied should certain conditions be met for a loyalty rule and program.\nSkipped properties: id,href",
      "properties": {
        "action": {
          "type": "string",
          "description": "The HTTP operation to be used when calling the endpoint"
        },
        "actionType": {
          "type": "string",
          "description": "The type of loyalty action."
        },
        "commonName": {
          "type": "string",
          "description": "A user-friendly identifier of the loyalty execution point."
        },
        "description": {
          "type": "string",
          "description": "A free-form description of the loyalty execution point."
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint to call to trigger a BusinessInteraction, CustomerOrder or LoyaltyEarn."
        },
        "version": {
          "type": "string",
          "description": "A string that identifies the version of the loyalty action."
        },
        "actionAttributes": {
          "$ref": "#/definitions/Any",
          "description": "Additional attributes required to perform the action. These attributes will depend on the type of the loyalty action. For example, if it is a LoyaltyEarn action, there will be a \u201cquantity\u201d attribute value pair indicating how many points should be earned."
        },
        "body": {
          "$ref": "#/definitions/Any",
          "description": "The body if the request that is made when this action i executed. The body is assumed to be of type text/json. Any tokens denoted with {} will be replaced by attributes present in: Member profile, actionAttributes or event attributes in the loyalty event request."
        },
        "headers": {
          "$ref": "#/definitions/Any",
          "description": "The HTTP headers that is added to the action call."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyActionRef": {
      "type": "object",
      "description": "A reference to a loyalty action.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty action."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty action."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyBalance": {
      "type": "object",
      "description": "A loyalty balance, containing a balance unit and value.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty balance."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty member\u2019s loyalty balance."
        },
        "loyaltyProgramMember": {
          "$ref": "#/definitions/LoyaltyProgramMemberRef",
          "description": "Reference to the loyaltyProgramMember to whom the loyaltyAccount belongs."
        },
        "quantity": {
          "$ref": "#/definitions/Money",
          "description": "Unit and value of the balance."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The validity period in which loyalty can be burned using the account."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyBalance_Create": {
      "type": "object",
      "description": "A loyalty balance, containing a balance unit and value.\nSkipped properties: id,href",
      "properties": {
        "loyaltyProgramMember": {
          "$ref": "#/definitions/LoyaltyProgramMemberRef",
          "description": "Reference to the loyaltyProgramMember to whom the loyaltyAccount belongs."
        },
        "quantity": {
          "$ref": "#/definitions/Money",
          "description": "Unit and value of the balance."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The validity period in which loyalty can be burned using the account."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyBalance_Update": {
      "type": "object",
      "description": "A loyalty balance, containing a balance unit and value.\nSkipped properties: id,href,quantity,loyaltyProgramMember",
      "properties": {
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The validity period in which loyalty can be burned using the account."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyCondition": {
      "type": "object",
      "description": "A condition, comprised of a attribute that will be tested against a value.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty condition."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty event type."
        },
        "attribute": {
          "type": "string",
          "description": "The attribute to evaluate."
        },
        "operator": {
          "type": "string",
          "description": "Comparison operator to be used in the evaluation."
        },
        "value": {
          "type": "string",
          "description": "The value of the attribute to be evaluated."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyCondition_Create": {
      "type": "object",
      "description": "A condition, comprised of a attribute that will be tested against a value.\nSkipped properties: id,href",
      "required": ["attribute", "operator", "value"],
      "properties": {
        "attribute": {
          "type": "string",
          "description": "The attribute to evaluate."
        },
        "operator": {
          "type": "string",
          "description": "Comparison operator to be used in the evaluation."
        },
        "value": {
          "type": "string",
          "description": "The value of the attribute to be evaluated."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyCondition_Update": {
      "type": "object",
      "description": "A condition, comprised of a attribute that will be tested against a value.\nSkipped properties: id,href",
      "properties": {
        "attribute": {
          "type": "string",
          "description": "The attribute to evaluate."
        },
        "operator": {
          "type": "string",
          "description": "Comparison operator to be used in the evaluation."
        },
        "value": {
          "type": "string",
          "description": "The value of the attribute to be evaluated."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyConditionRef": {
      "type": "object",
      "description": "A reference to a loyalty condition.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty condition."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty condition."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyEvent": {
      "type": "object",
      "description": "A loyalty event notification.",
      "properties": {
        "eventTime": {
          "type": "string",
          "description": "The time that the event was received."
        },
        "eventType": {
          "type": "string",
          "description": "The incoming loyalty event type."
        },
        "memberId": {
          "type": "string",
          "description": "The loyalty program member ID associated with the event."
        },
        "event": {
          "$ref": "#/definitions/Any",
          "description": "The event attributes."
        },
        "eventId": {
          "$ref": "#/definitions/LoyaltyProgramProductRef"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyEvent_Create": {
      "type": "object",
      "description": "A loyalty event notification.\nSkipped properties: id,href",
      "properties": {
        "eventTime": {
          "type": "string",
          "description": "The time that the event was received."
        },
        "eventType": {
          "type": "string",
          "description": "The incoming loyalty event type."
        },
        "memberId": {
          "type": "string",
          "description": "The loyalty program member ID associated with the event."
        },
        "event": {
          "$ref": "#/definitions/Any",
          "description": "The event attributes."
        },
        "eventId": {
          "$ref": "#/definitions/LoyaltyProgramProductRef"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyEvent_Update": {
      "type": "object",
      "description": "A loyalty event notification.\nSkipped properties: id,href",
      "properties": {
        "eventTime": {
          "type": "string",
          "description": "The time that the event was received."
        },
        "eventType": {
          "type": "string",
          "description": "The incoming loyalty event type."
        },
        "memberId": {
          "type": "string",
          "description": "The loyalty program member ID associated with the event."
        },
        "event": {
          "$ref": "#/definitions/Any",
          "description": "The event attributes."
        },
        "eventId": {
          "$ref": "#/definitions/LoyaltyProgramProductRef"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyEventType": {
      "type": "object",
      "description": "An event type used to match filter incoming loyalty events.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty event type."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty event type."
        },
        "eventType": {
          "type": "string",
          "description": "The type of loyalty event expected to trigger the loyalty rule evaluation, e.g. a CustomerOrder or an Invoice. The eventType should be unique to prevent existing resources not being reused. An eventType that already exists will result in a 422 error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyEventType_Create": {
      "type": "object",
      "description": "An event type used to match filter incoming loyalty events.\nSkipped properties: id,href",
      "required": ["eventType"],
      "properties": {
        "eventType": {
          "type": "string",
          "description": "The type of loyalty event expected to trigger the loyalty rule evaluation, e.g. a CustomerOrder or an Invoice. The eventType should be unique to prevent existing resources not being reused. An eventType that already exists will result in a 422 error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyEventType_Update": {
      "type": "object",
      "description": "An event type used to match filter incoming loyalty events.\nSkipped properties: id,href",
      "properties": {
        "eventType": {
          "type": "string",
          "description": "The type of loyalty event expected to trigger the loyalty rule evaluation, e.g. a CustomerOrder or an Invoice. The eventType should be unique to prevent existing resources not being reused. An eventType that already exists will result in a 422 error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyEventTypeRef": {
      "type": "object",
      "description": "A reference to a loyalty event type.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty event type."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty event type."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyProgramMember": {
      "type": "object",
      "description": "A person or group that opts in to a loyalty program.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty program member."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty program member."
        },
        "name": {
          "type": "string",
          "description": "The loyalty members name."
        },
        "status": {
          "type": "string",
          "description": "A free-form field in which the members status may be captured, e.g. [active], [suspended], .etc."
        },
        "ValidFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period during which the loyalty member is valid for."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramMember_Create": {
      "type": "object",
      "description": "A person or group that opts in to a loyalty program.\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "The loyalty members name."
        },
        "status": {
          "type": "string",
          "description": "A free-form field in which the members status may be captured, e.g. [active], [suspended], .etc."
        },
        "ValidFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period during which the loyalty member is valid for."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramMember_Update": {
      "type": "object",
      "description": "A person or group that opts in to a loyalty program.\nSkipped properties: id,href",
      "properties": {
        "name": {
          "type": "string",
          "description": "The loyalty members name."
        },
        "status": {
          "type": "string",
          "description": "A free-form field in which the members status may be captured, e.g. [active], [suspended], .etc."
        },
        "ValidFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period during which the loyalty member is valid for."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramMemberRef": {
      "type": "object",
      "description": "Reference to a loyalty member.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty program member."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty program member."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyProgramProduct": {
      "type": "object",
      "description": "An instance of a loyalty program specification, linked to a specified loyalty member.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty program product."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty account."
        },
        "description": {
          "type": "string",
          "description": "An explanation of what the product is."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the product is known and distinguished from other products."
        },
        "productStatus": {
          "type": "string",
          "description": "The condition of the product, such as planned, designed, activated, disconnected."
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          },
          "description": "Name value pairs of product characteristics."
        },
        "loyaltyAccount": {
          "$ref": "#/definitions/LoyaltyAccountRef"
        },
        "loyaltyProgramProductSpec": {
          "$ref": "#/definitions/LoyaltyProgramProductSpecRef"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramProduct_Create": {
      "type": "object",
      "description": "An instance of a loyalty program specification, linked to a specified loyalty member.\nSkipped properties: id,href",
      "properties": {
        "description": {
          "type": "string",
          "description": "An explanation of what the product is."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the product is known and distinguished from other products."
        },
        "productStatus": {
          "type": "string",
          "description": "The condition of the product, such as planned, designed, activated, disconnected."
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          },
          "description": "Name value pairs of product characteristics."
        },
        "loyaltyAccount": {
          "$ref": "#/definitions/LoyaltyAccountRef"
        },
        "loyaltyProgramProductSpec": {
          "$ref": "#/definitions/LoyaltyProgramProductSpecRef"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramProduct_Update": {
      "type": "object",
      "description": "An instance of a loyalty program specification, linked to a specified loyalty member.\nSkipped properties: id,href",
      "properties": {
        "description": {
          "type": "string",
          "description": "An explanation of what the product is."
        },
        "name": {
          "type": "string",
          "description": "A word, term, or phrase by which the product is known and distinguished from other products."
        },
        "productStatus": {
          "type": "string",
          "description": "The condition of the product, such as planned, designed, activated, disconnected."
        },
        "characteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          },
          "description": "Name value pairs of product characteristics."
        },
        "loyaltyAccount": {
          "$ref": "#/definitions/LoyaltyAccountRef"
        },
        "loyaltyProgramProductSpec": {
          "$ref": "#/definitions/LoyaltyProgramProductSpecRef"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramProductRef": {
      "type": "object",
      "description": "A reference to a loyalty product.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty program product."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty program product."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyProgramProductSpec": {
      "type": "object",
      "description": "A reference to a loyalty program specification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product specification."
        },
        "href": {
          "type": "string",
          "description": "A reference to the product specification."
        },
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is."
        },
        "lifeCycleStatus": {
          "type": "string",
          "description": "The condition of the product specification, such as active, inactive, planned."
        },
        "name": {
          "type": "string",
          "description": "The name of the product specification."
        },
        "needsLoyaltyAccount": {
          "type": "boolean",
          "description": "A narrative that explains in detail what the product specification is."
        },
        "productNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramProductSpec_Create": {
      "type": "object",
      "description": "A reference to a loyalty program specification.\nSkipped properties: id,href",
      "required": ["name", "productNumber"],
      "properties": {
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is."
        },
        "lifeCycleStatus": {
          "type": "string",
          "description": "The condition of the product specification, such as active, inactive, planned."
        },
        "name": {
          "type": "string",
          "description": "The name of the product specification."
        },
        "needsLoyaltyAccount": {
          "type": "boolean",
          "description": "A narrative that explains in detail what the product specification is."
        },
        "productNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramProductSpec_Update": {
      "type": "object",
      "description": "A reference to a loyalty program specification.\nSkipped properties: id,href,needsLoyaltyAccount",
      "properties": {
        "brand": {
          "type": "string",
          "description": "The manufacturer or trademark of the specification."
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail what the product specification is."
        },
        "lifeCycleStatus": {
          "type": "string",
          "description": "The condition of the product specification, such as active, inactive, planned."
        },
        "name": {
          "type": "string",
          "description": "The name of the product specification."
        },
        "productNumber": {
          "type": "string"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyProgramProductSpecRef": {
      "type": "object",
      "description": "A reference to a loyalty program specification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product specification."
        },
        "href": {
          "type": "string",
          "description": "A reference to the product specification."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "format": "uri",
          "description": "The type of the referred entity"
        }
      },
      "required": ["id", "href"]
    },
    "LoyaltyRule": {
      "type": "object",
      "description": "Loyalty rule, containing conditions, event types and actions.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty rule."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty rule."
        },
        "commonName": {
          "type": "string",
          "description": "A user-friendly identifier of the loyalty rule."
        },
        "description": {
          "type": "string",
          "description": "A free-form description of the rule."
        },
        "hasSubRules": {
          "type": "boolean",
          "description": "A Boolean attribute that signifies whether this loyalty rule has one or more sub-rules. Sub-rules are used to enforce a hierarchical nesting of rules, so that parent rules may control the execution and other semantics of sub-rules that they contain."
        },
        "isCNF": {
          "type": "boolean",
          "description": "This is a Boolean attribute that, if true, defines the condition clause of this rule to be represented in Conjunctive Normal Form (e.g., an AND of ORs). If the value of this attribute is false, then the condition clause will be represented in Disjunctive Normal Form (e.g., an OR of ANDs)."
        },
        "isMandatoryEvaluation": {
          "type": "boolean",
          "description": "A Boolean attribute that, if true, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If the Mandatory property value of this entity is false, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
        },
        "keywords": {
          "type": "string",
          "description": "A string attribute that defines a set of one or more keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
        },
        "policyName": {
          "type": "string",
          "description": "A generic naming attribute that can be used to identify different policy entities."
        },
        "usage": {
          "type": "string",
          "description": "A free-form string attribute that recommends how this policy object should be used."
        },
        "loyaltyAction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoyaltyActionRef"
          },
          "description": "References to linked actions."
        },
        "loyaltyCondition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoyaltyConditionRef"
          },
          "description": "References to linked conditions."
        },
        "loyaltyEventType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoyaltyEventTypeRef"
          },
          "description": "References to linked event types."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRule_Create": {
      "type": "object",
      "description": "Loyalty rule, containing conditions, event types and actions.\nSkipped properties: id,href",
      "properties": {
        "commonName": {
          "type": "string",
          "description": "A user-friendly identifier of the loyalty rule."
        },
        "description": {
          "type": "string",
          "description": "A free-form description of the rule."
        },
        "hasSubRules": {
          "type": "boolean",
          "description": "A Boolean attribute that signifies whether this loyalty rule has one or more sub-rules. Sub-rules are used to enforce a hierarchical nesting of rules, so that parent rules may control the execution and other semantics of sub-rules that they contain."
        },
        "isCNF": {
          "type": "boolean",
          "description": "This is a Boolean attribute that, if true, defines the condition clause of this rule to be represented in Conjunctive Normal Form (e.g., an AND of ORs). If the value of this attribute is false, then the condition clause will be represented in Disjunctive Normal Form (e.g., an OR of ANDs)."
        },
        "isMandatoryEvaluation": {
          "type": "boolean",
          "description": "A Boolean attribute that, if true, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If the Mandatory property value of this entity is false, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
        },
        "keywords": {
          "type": "string",
          "description": "A string attribute that defines a set of one or more keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
        },
        "policyName": {
          "type": "string",
          "description": "A generic naming attribute that can be used to identify different policy entities."
        },
        "usage": {
          "type": "string",
          "description": "A free-form string attribute that recommends how this policy object should be used."
        },
        "loyaltyAction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoyaltyActionRef"
          },
          "description": "References to linked actions."
        },
        "loyaltyCondition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoyaltyConditionRef"
          },
          "description": "References to linked conditions."
        },
        "loyaltyEventType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoyaltyEventTypeRef"
          },
          "description": "References to linked event types."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRule_Update": {
      "type": "object",
      "description": "Loyalty rule, containing conditions, event types and actions.\nSkipped properties: id,href,loyaltyEventType,loyaltyCondition,loyaltyAction",
      "properties": {
        "commonName": {
          "type": "string",
          "description": "A user-friendly identifier of the loyalty rule."
        },
        "description": {
          "type": "string",
          "description": "A free-form description of the rule."
        },
        "hasSubRules": {
          "type": "boolean",
          "description": "A Boolean attribute that signifies whether this loyalty rule has one or more sub-rules. Sub-rules are used to enforce a hierarchical nesting of rules, so that parent rules may control the execution and other semantics of sub-rules that they contain."
        },
        "isCNF": {
          "type": "boolean",
          "description": "This is a Boolean attribute that, if true, defines the condition clause of this rule to be represented in Conjunctive Normal Form (e.g., an AND of ORs). If the value of this attribute is false, then the condition clause will be represented in Disjunctive Normal Form (e.g., an OR of ANDs)."
        },
        "isMandatoryEvaluation": {
          "type": "boolean",
          "description": "A Boolean attribute that, if true, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If the Mandatory property value of this entity is false, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
        },
        "keywords": {
          "type": "string",
          "description": "A string attribute that defines a set of one or more keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
        },
        "policyName": {
          "type": "string",
          "description": "A generic naming attribute that can be used to identify different policy entities."
        },
        "usage": {
          "type": "string",
          "description": "A free-form string attribute that recommends how this policy object should be used."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRuleAction": {
      "type": "object",
      "description": "Resource containing a the ID of a action to link to a loyalty rule.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty action."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty action."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRuleAction_Create": {
      "type": "object",
      "description": "Resource containing a the ID of a action to link to a loyalty rule.\nSkipped properties: id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRuleCondition": {
      "type": "object",
      "description": "Resource containing a the ID of a condition to link to a loyalty rule.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty condition."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty condition."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRuleCondition_Create": {
      "type": "object",
      "description": "Resource containing a the ID of a condition to link to a loyalty rule.\nSkipped properties: id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRuleEventType": {
      "type": "object",
      "description": "Resource containing a the ID of a event type to link to a loyalty rule.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the loyalty event type."
        },
        "href": {
          "type": "string",
          "description": "A reference to the loyalty event type."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "LoyaltyRuleEventType_Create": {
      "type": "object",
      "description": "Resource containing a the ID of a event type to link to a loyalty rule.\nSkipped properties: id,href",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Money": {
      "type": "object",
      "description": "A base / value business entity used to represent money",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A positive floating point number"
        }
      }
    },
    "TimePeriod": {
      "type": "object",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      }
    },
    "EventSubscription": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": ["id", "callback"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "EventSubscriptionInput": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": ["callback"],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": ["code", "reason"],
      "properties": {
        "code": {
          "type": "integer",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "status": {
          "type": "integer",
          "description": "HTTP Error code extension"
        },
        "referenceError": {
          "type": "string",
          "format": "uri",
          "description": "URI of documentation describing the error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        }
      }
    }
  }
}
