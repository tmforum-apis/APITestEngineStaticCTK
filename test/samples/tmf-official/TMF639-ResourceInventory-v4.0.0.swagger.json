{
  "swagger": "2.0",
  "info": {
    "title": "Resource Inventory Management",
    "description": "This is Swagger UI environment generated for the TMF Resource Inventory Management specification",
    "version": "4.0"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/resourceInventoryManagement/v4/",
  "schemes": ["https"],
  "consumes": ["application/json;charset=utf-8"],
  "produces": ["application/json;charset=utf-8"],
  "tags": [
    {
      "name": "resource"
    },
    {
      "name": "physicalResource"
    },
    {
      "name": "logicalResource"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/resource": {
      "get": {
        "operationId": "listResource",
        "summary": "List or find Resource objects",
        "description": "This operation list or find Resource entities",
        "tags": ["resource"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Resource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createResource",
        "summary": "Creates a Resource",
        "description": "This operation creates a Resource entity.",
        "tags": ["resource"],
        "parameters": [
          {
            "name": "resource",
            "description": "The Resource to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/resource/{id}": {
      "get": {
        "operationId": "retrieveResource",
        "summary": "Retrieves a Resource by ID",
        "description": "This operation retrieves a Resource entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["resource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Resource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchResource",
        "summary": "Updates partially a Resource",
        "description": "This operation updates partially a Resource entity.",
        "tags": ["resource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Resource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "resource",
            "description": "The Resource to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteResource",
        "summary": "Deletes a Resource",
        "description": "This operation deletes a Resource entity.",
        "tags": ["resource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the Resource",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/physicalResource": {
      "get": {
        "operationId": "listPhysicalResource",
        "summary": "List or find PhysicalResource objects",
        "description": "This operation list or find PhysicalResource entities",
        "tags": ["physicalResource"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalResource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createPhysicalResource",
        "summary": "Creates a PhysicalResource",
        "description": "This operation creates a PhysicalResource entity.",
        "tags": ["physicalResource"],
        "parameters": [
          {
            "name": "physicalResource",
            "description": "The PhysicalResource to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalResource_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PhysicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/physicalResource/{id}": {
      "get": {
        "operationId": "retrievePhysicalResource",
        "summary": "Retrieves a PhysicalResource by ID",
        "description": "This operation retrieves a PhysicalResource entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["physicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the PhysicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PhysicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchPhysicalResource",
        "summary": "Updates partially a PhysicalResource",
        "description": "This operation updates partially a PhysicalResource entity.",
        "tags": ["physicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the PhysicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "physicalResource",
            "description": "The PhysicalResource to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalResource_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/PhysicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePhysicalResource",
        "summary": "Deletes a PhysicalResource",
        "description": "This operation deletes a PhysicalResource entity.",
        "tags": ["physicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the PhysicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logicalResource": {
      "get": {
        "operationId": "listLogicalResource",
        "summary": "List or find LogicalResource objects",
        "description": "This operation list or find LogicalResource entities",
        "tags": ["logicalResource"],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LogicalResource"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createLogicalResource",
        "summary": "Creates a LogicalResource",
        "description": "This operation creates a LogicalResource entity.",
        "tags": ["logicalResource"],
        "parameters": [
          {
            "name": "logicalResource",
            "description": "The LogicalResource to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogicalResource_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LogicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logicalResource/{id}": {
      "get": {
        "operationId": "retrieveLogicalResource",
        "summary": "Retrieves a LogicalResource by ID",
        "description": "This operation retrieves a LogicalResource entity. Attribute selection is enabled for all first level attributes.",
        "tags": ["logicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LogicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "operationId": "updateLogicalResource",
        "summary": "Updates a LogicalResource",
        "description": "This operation updates a LogicalResource entity.",
        "tags": ["logicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LogicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "logicalResource",
            "description": "The LogicalResource to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogicalResource_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LogicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchLogicalResource",
        "summary": "Updates partially a LogicalResource",
        "description": "This operation updates partially a LogicalResource entity.",
        "tags": ["logicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LogicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "logicalResource",
            "description": "The LogicalResource to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogicalResource_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/LogicalResource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLogicalResource",
        "summary": "Deletes a LogicalResource",
        "description": "This operation deletes a LogicalResource entity.",
        "tags": ["logicalResource"],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the LogicalResource",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": ["events subscription"],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": ["events subscription"],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resourceCreateEvent": {
      "post": {
        "operationId": "listenToResourceCreateEvent",
        "summary": "Client listener for entity ResourceCreateEvent",
        "description": "Example of a client listener for receiving the notification ResourceCreateEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/ResourceCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resourceAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToResourceAttributeValueChangeEvent",
        "summary": "Client listener for entity ResourceAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification ResourceAttributeValueChangeEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/ResourceAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resourceStateChangeEvent": {
      "post": {
        "operationId": "listenToResourceStateChangeEvent",
        "summary": "Client listener for entity ResourceStateChangeEvent",
        "description": "Example of a client listener for receiving the notification ResourceStateChangeEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/ResourceStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/resourceDeleteEvent": {
      "post": {
        "operationId": "listenToResourceDeleteEvent",
        "summary": "Client listener for entity ResourceDeleteEvent",
        "description": "Example of a client listener for receiving the notification ResourceDeleteEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/ResourceDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/physicalResourceCreateEvent": {
      "post": {
        "operationId": "listenToPhysicalResourceCreateEvent",
        "summary": "Client listener for entity PhysicalResourceCreateEvent",
        "description": "Example of a client listener for receiving the notification PhysicalResourceCreateEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/physicalResourceAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToPhysicalResourceAttributeValueChangeEvent",
        "summary": "Client listener for entity PhysicalResourceAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification PhysicalResourceAttributeValueChangeEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/physicalResourceStateChangeEvent": {
      "post": {
        "operationId": "listenToPhysicalResourceStateChangeEvent",
        "summary": "Client listener for entity PhysicalResourceStateChangeEvent",
        "description": "Example of a client listener for receiving the notification PhysicalResourceStateChangeEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/physicalResourceDeleteEvent": {
      "post": {
        "operationId": "listenToPhysicalResourceDeleteEvent",
        "summary": "Client listener for entity PhysicalResourceDeleteEvent",
        "description": "Example of a client listener for receiving the notification PhysicalResourceDeleteEvent",
        "tags": ["notification listeners (client side)"],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/PhysicalResourceDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Any": {},
    "Attachment": {
      "type": "object",
      "description": "Complements the description of an element (for instance a product) through video, pictures...",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "size": {
          "$ref": "#/definitions/Quantity",
          "description": "The size of the attachment."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period of time for which the attachment is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "AttachmentRef": {
      "type": "object",
      "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique-Identifier for this attachment"
        },
        "href": {
          "type": "string",
          "description": "URL serving as reference for the attachment resource"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "url": {
          "type": "string",
          "description": "Link to the attachment media/content"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": ["id"]
    },
    "AttachmentRefOrValue": {
      "type": "object",
      "description": "An attachment by value or by reference. For AttachmentRefOrValue, the attribute type,schemaLocation and referredType are related to the contained entity and not to AttchmentRefOrValue itself",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this particular attachment"
        },
        "href": {
          "type": "string",
          "description": "URI for this Attachment"
        },
        "attachmentType": {
          "type": "string",
          "description": "Attachment type such as video, picture"
        },
        "content": {
          "type": "string",
          "description": "The actual contents of the attachment object, if embedded, encoded as base64"
        },
        "description": {
          "type": "string",
          "description": "A narrative text describing the content of the attachment"
        },
        "mimeType": {
          "type": "string",
          "description": "Attachment mime type such as extension file for video, picture and document"
        },
        "name": {
          "type": "string",
          "description": "The name of the attachment"
        },
        "url": {
          "type": "string",
          "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
        },
        "size": {
          "$ref": "#/definitions/Quantity",
          "description": "The size of the attachment."
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period of time for which the attachment is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "required": ["name", "value"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        },
        "characteristicRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacteristicRelationship"
          }
        },
        "value": {
          "$ref": "#/definitions/Any",
          "description": "The value of the characteristic"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "CharacteristicRelationship": {
      "type": "object",
      "description": "Another Characteristic that is related to the current Characteristic;",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of relationship"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "EntityRef": {
      "type": "object",
      "description": "Entity reference schema to be use for all entityRef class.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": ["id"]
    },
    "LogicalResource": {
      "type": "object",
      "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
      "required": ["href", "id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "value": {
          "type": "string",
          "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "LogicalResource_Create": {
      "type": "object",
      "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.\nSkipped properties: id,href",
      "required": ["href", "id"],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "value": {
          "type": "string",
          "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "LogicalResource_Update": {
      "type": "object",
      "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.\nSkipped properties: id,href",
      "required": ["href", "id"],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "value": {
          "type": "string",
          "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
        },
        "author": {
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "type": "string",
          "description": "Text of the note"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "PhysicalResource": {
      "type": "object",
      "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.",
      "required": ["href", "id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "manufactureDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "powerState": {
          "type": "string",
          "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "serialNumber": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "versionNumber": {
          "type": "string",
          "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "PhysicalResource_Create": {
      "type": "object",
      "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.\nSkipped properties: id,href",
      "required": ["href", "id", "name"],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "manufactureDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "powerState": {
          "type": "string",
          "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "serialNumber": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "versionNumber": {
          "type": "string",
          "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "PhysicalResource_Update": {
      "type": "object",
      "description": "Physical resource is a type of resource that describes the common set of attributes shared by all concrete physical resources (e.g. EQUIPMENT) in the inventory.\nSkipped properties: id,href",
      "required": ["href", "id"],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "manufactureDate": {
          "type": "string",
          "format": "date-time",
          "description": "This is a string attribute that defines the date of manufacture of this item in the fixed format \"dd/mm/yyyy\". This is an optional attribute."
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "powerState": {
          "type": "string",
          "description": "This defines the current power status of the hardware item. Values include:\n\n  0:  Unknown\n  1:  Not Applicable\n  2:  No Power Applied\n  3: Full Power Applied\n  4:  Power Save - Normal\n  5:  Power Save - Degraded\n  6:  Power Save - Standby\n  7:  Power Save - Critical\n  8:  Power Save - Low Power Mode\n  9:  Power Save - Unknown\n 10: Power Cycle\n 11: Power Warning\n 12: Power Off"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "serialNumber": {
          "type": "string",
          "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "versionNumber": {
          "type": "string",
          "description": "This is a string that identifies the version of this physical resource. This is an optional attribute."
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "Place": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "required": ["href", "id", "role"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "role": {
          "type": "string",
          "description": "Role of the place (for instance: 'home delivery', 'shop retrieval')"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "PlaceRef": {
      "type": "object",
      "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": ["id"]
    },
    "Quantity": {
      "type": "object",
      "description": "An amount in a given unit",
      "properties": {
        "amount": {
          "default": 1,
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      }
    },
    "RelatedParty": {
      "type": "object",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
      "required": ["@referredType", "id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "href": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "RelatedPlaceRefOrValue": {
      "type": "object",
      "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
      "required": ["href", "id", "role"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as \"Paris Store\", \"London Store\", \"Main Home\""
        },
        "role": {
          "type": "string"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "Resource": {
      "type": "object",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
      "required": ["href", "id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
        },
        "href": {
          "type": "string",
          "description": "The URI for the object itself."
        },
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Resource_Create": {
      "type": "object",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.\nSkipped properties: id,href",
      "required": ["href", "id", "name"],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "Resource_Update": {
      "type": "object",
      "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.\nSkipped properties: id,href",
      "required": ["href", "id"],
      "properties": {
        "category": {
          "type": "string",
          "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
        },
        "description": {
          "type": "string",
          "description": "free-text description of the resource"
        },
        "endOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date till the resource is operating"
        },
        "name": {
          "type": "string",
          "description": "A string used to give a name to the resource"
        },
        "resourceVersion": {
          "type": "string",
          "description": "A field that identifies the specific version of an instance of a resource."
        },
        "startOperatingDate": {
          "type": "string",
          "format": "date-time",
          "description": "A date time( DateTime). The date from which the resource is operating"
        },
        "administrativeState": {
          "$ref": "#/definitions/ResourceAdministrativeStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "attachment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentRefOrValue"
          }
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "operationalState": {
          "$ref": "#/definitions/ResourceOperationalStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "place": {
          "$ref": "#/definitions/RelatedPlaceRefOrValue"
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "resourceCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "resourceRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRelationship"
          }
        },
        "resourceSpecification": {
          "$ref": "#/definitions/ResourceSpecificationRef"
        },
        "resourceStatus": {
          "$ref": "#/definitions/ResourceStatusType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "usageState": {
          "$ref": "#/definitions/ResourceUsageStateType",
          "description": "Tracks the lifecycle status of the resource, such as planning, installing, opereating, retiring and so on."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "ResourceAdministrativeStateType": {
      "type": "string",
      "description": "ResourceAdministrativeStateType enumerations",
      "enum": ["locked", "unlocked", "shutdown"]
    },
    "ResourceOperationalStateType": {
      "type": "string",
      "description": "ResourceOperationalStateType enumerations",
      "enum": ["enable", "disable"]
    },
    "ResourceRelationship": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id of the related resource."
        },
        "href": {
          "type": "string",
          "description": "href of the related resource."
        },
        "relationshipType": {
          "type": "string"
        },
        "resourceRelationshipCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        }
      }
    },
    "ResourceSpecificationRef": {
      "type": "object",
      "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.",
      "required": ["href", "id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the resource specification"
        },
        "href": {
          "type": "string",
          "description": "Reference of the resource specification"
        },
        "name": {
          "type": "string",
          "description": "Name of the requiredResourceSpecification"
        },
        "version": {
          "type": "string",
          "description": "Resource specification version"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "ResourceStatusType": {
      "type": "string",
      "description": "ResourceStatusType enumerations",
      "enum": ["standby", "alarm", "available", "reserved", "unknown", "suspended"]
    },
    "ResourceUsageStateType": {
      "type": "string",
      "description": "ResourceUsageStateType enumerations",
      "enum": ["idle", "active", "busy"]
    },
    "TimePeriod": {
      "type": "object",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
      "properties": {
        "endDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
        }
      }
    },
    "EventSubscription": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": ["id", "callback"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "EventSubscriptionInput": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": ["callback"],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "ResourceCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResourceCreateEventPayload"
        }
      }
    },
    "ResourceCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "resource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "ResourceAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResourceAttributeValueChangeEventPayload"
        }
      }
    },
    "ResourceAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "resource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "ResourceStateChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResourceStateChangeEventPayload"
        }
      }
    },
    "ResourceStateChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "resource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "ResourceDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/ResourceDeleteEventPayload"
        }
      }
    },
    "ResourceDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "resource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "PhysicalResourceCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/PhysicalResourceCreateEventPayload"
        }
      }
    },
    "PhysicalResourceCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "physicalResource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/PhysicalResource"
        }
      }
    },
    "PhysicalResourceAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/PhysicalResourceAttributeValueChangeEventPayload"
        }
      }
    },
    "PhysicalResourceAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "physicalResource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/PhysicalResource"
        }
      }
    },
    "PhysicalResourceStateChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/PhysicalResourceStateChangeEventPayload"
        }
      }
    },
    "PhysicalResourceStateChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "physicalResource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/PhysicalResource"
        }
      }
    },
    "PhysicalResourceDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the Process flow"
        },
        "href": {
          "type": "string",
          "description": "Reference of the ProcessFlow"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/PhysicalResourceDeleteEventPayload"
        }
      }
    },
    "PhysicalResourceDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "physicalResource": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/PhysicalResource"
        }
      }
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": ["code", "reason"],
      "properties": {
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        },
        "referenceError": {
          "type": "string",
          "format": "uri",
          "description": "URI of documentation describing the error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        }
      }
    }
  }
}
